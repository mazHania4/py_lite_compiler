statements: statement _statements
_statements: 
    | statement _statements
    | ε


statement: compound_stmt | simple_stmts 

simple_stmts:
    | simple_stmt _simple_stmts opt_semicolon NEWLINE
_simple_stmts:
    | ';' simple_stmt _simple_stmts
    | ε

simple_stmt:
    | assignment
    | expressions 
    | return_stmt
    | 'pass' 
    | 'break' 
    | 'continue' 

compound_stmt:
    | function_def
    | if_stmt
    | for_stmt
    | while_stmt

assignment:
    | NAME ':' expression opt_assign_expressions
    | '(' single_target ')' ':' expression opt_assign_expressions
    | single_subscript_attribute_target ':' expression opt_assign_expressions
    | targets '=' _assignment expressions
    | single_target augassign expressions
##    | single_target augassign ~ expressions
_assignment:
    | targets '=' _assignment
    | ε

augassign:
    | '+=' 
    | '-=' 
    | '*=' 
    | '@=' 
    | '/=' 
    | '%=' 
    | '&=' 
    | '|=' 
    | '^=' 
    | '<<=' 
    | '>>=' 
    | '**=' 
    | '//=' 

return_stmt:
    | 'return' opt_expressions

block:
    | NEWLINE INDENT statements DEDENT 
    | simple_stmts

function_def:
    | 'def' NAME '(' opt_parameters ')' ':' block 

parameters:
    | param_no_default _params_n _params_w
    | param_with_default _params_w
_params_n:
    | param_no_default _params_n
    | ε
_params_w:
    | param_with_default _params_w
    | ε

param_no_default:
    | param ','  
    | param &')' 
param_with_default:
    | param _default ','  
    | param _default &')' 
param: NAME 
_default: '=' expression

if_stmt:
    | 'if' expression ':' block opt_elif_or_else_block 

elif_stmt:
    | 'elif' expression ':' block opt_elif_or_else_block 
else_block:
    | 'else' ':' block 

while_stmt:
    | 'while' expression ':' block opt_else_block 

for_stmt:
    | 'for' targets 'in' expressions ':' block opt_else_block 
##    | 'for' targets 'in' ~ expressions ':' block else_block 
##    | 'for' targets 'in' ~ expressions ':' block  


expressions:
    | expression _expressions opt_comma 
_expressions:
    | ',' expression _expressions
    | ε

expression:
    | disjunction opt_ternary_operator 

disjunction:
    | conjunction _disjunction
_disjunction:
    | 'or' conjunction _disjunction
    | ε

conjunction:
    | inversion _conjunction
_conjunction:
    | 'and' inversion _conjunction
    | ε

inversion:
    | 'not' inversion 
    | comparison

comparison:
    | bitwise_or _comparison
_comparison:
    | compare_op_bitwise_or_pair _comparison
    | ε

compare_op_bitwise_or_pair:
    | eq_bitwise_or
    | noteq_bitwise_or
    | lte_bitwise_or
    | lt_bitwise_or
    | gte_bitwise_or
    | gt_bitwise_or
    | notin_bitwise_or
    | in_bitwise_or
    | isnot_bitwise_or
    | is_bitwise_or

eq_bitwise_or: '==' bitwise_or 
noteq_bitwise_or: '!=' bitwise_or 
lte_bitwise_or: '<=' bitwise_or 
lt_bitwise_or: '<' bitwise_or 
gte_bitwise_or: '>=' bitwise_or 
gt_bitwise_or: '>' bitwise_or 
notin_bitwise_or: 'not' 'in' bitwise_or 
in_bitwise_or: 'in' bitwise_or 
isnot_bitwise_or: 'is' 'not' bitwise_or 
is_bitwise_or: 'is' bitwise_or 

bitwise_or:
    | bitwise_xor _bitwise_or
_bitwise_or:
    | '|' bitwise_xor _bitwise_or
    | ε

bitwise_xor:
    | bitwise_and _bitwise_xor
_bitwise_xor:
    | '^' bitwise_and _bitwise_xor
    | ε

bitwise_and:
    | shift_expr _bitwise_and
_bitwise_and:
    | '&' shift_expr _bitwise_and
    | ε

shift_expr:
    | sum _shift_expr
_shift_expr:
    | '<<' sum _shift_expr
    | '>>' sum _shift_expr
    | ε

sum:
    | term _sum
_sum:
    | '+' term _sum
    | '-' term _sum
    | ε

term:
    | factor _term
_term:
    | '*' factor _term
    | '/' factor _term
    | '//' factor _term
    | '%' factor _term
    | '@' factor _term
    | ε

factor:
    | '+' factor 
    | '-' factor 
    | '~' factor 
    | power

power:
    | primary opt_power

primary:
    | atom _primary
_primary:
    | '.' NAME _primary
    | '(' opt_arguments ')' _primary
    | ε

atom:
    | NAME
    | 'True' 
    | 'False' 
    | 'None' 
    | strings
    | NUMBER
    | tuple 
    | group
    | list
    | dict 
    | set

group:
    | '(' expression ')' 

strings: STRING _strings
_strings: 
    | STRING _strings
    | ε

list:
    | '[' opt_expressions ']' 

tuple:
    | '(' opt_tuple_content ')' 

set: '{' expressions '}' 

dict:
    | '{' opt_kvpairs '}' 

kvpairs: 
    | kvpair _kvpairs opt_comma
_kvpairs:
    | ',' kvpair _kvpairs
    | ε

kvpair: expression ':' expression 

arguments:
    | args ',' &')' 
    | args  &')' 

args:
    | expression _args opt_comma_kwargs
    | kwargs 
_args:
    | ',' expression _args
    | ε

kwargs:
    | kwarg _kwargs
_kwargs:
    | ',' kwarg _kwargs
    | ε

kwarg:
    | NAME '=' expression 

targets:
    | target_with_targ_atom _targets opt_comma 
_targets:
    | ',' target_with_targ_atom _targets
    | ε

targets_list_seq: 
    | target_with_targ_atom _targets_seq opt_comma
targets_tuple_seq:
    | target_with_targ_atom opt_targets_seq_or_comma 
_targets_seq: 
    |',' target_with_targ_atom _targets_seq
    | ε

target_with_targ_atom:
    | t_primary '.' NAME !t_lookahead 
    | targ_atom

targ_atom:
    | NAME 
    | '(' opt_twta_or_tts ')' 
    | '[' opt_targets_list_seq ']' 

single_target:
    | single_subscript_attribute_target
    | NAME 
    | '(' single_target ')' 

single_subscript_attribute_target:
    | t_primary '.' NAME !t_lookahead 

t_primary:
    | atom _t_primary &t_lookahead
_t_primary:
    | '.' NAME _t_primary &t_lookahead
    | '(' opt_arguments ')' _t_primary &t_lookahead
    | ε

t_lookahead: '(' | '[' | '.'

opt_semicolon:
    | ';'
    | ε

opt_comma:
    | ','
    | ε

opt_assign_expressions:
    | '=' expressions
    | ε

opt_expressions:
    | expressions
    | ε

opt_parameters:
    | parameters
    | ε

opt_else_block:
    | else_block
    | ε

opt_elif_or_else_block:
    | elif_stmt
    | else_block
    | ε

opt_ternary_operator:
    | 'if' disjunction 'else' expression 
    | ε

opt_power:
    | '**' factor 
    | ε

opt_arguments:
    | arguments
    | ε

opt_tuple_content:
    | expressions ',' opt_expressions 
    | ε

opt_kvpairs:
    | kvpairs 
    | ε

opt_comma_kwargs:
    | ',' kwargs
    | ε

opt_targets_seq_or_comma:
    | _targets_seq opt_comma 
    | ',' 
    | ε

opt_twta_or_tts:
    | target_with_targ_atom
    | targets_tuple_seq    
    | ε

opt_targets_list_seq:
    | targets_list_seq    
    | ε